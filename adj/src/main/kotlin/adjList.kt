import java.util.*

/**
 * 인접 리스트
 * 그래프의 간선 정보를 리스트로 표현하므로, 각 노드의 인접한 노드들을 리스트로 연결하여 저장한다.
 * 노드 간의 연결 여부와 가중치를 확인하는데에는 조금 더 많은 시간이 소요될 수 있지만,
 * 그래프의 구조가 희소하거나 간선의 개수가 많은 경우에는 인접 리스트가 공간을 더 효율적으로 사용할 수 있다.
 */

fun adjList(N: Int, u: Int, v: Int){

    val weight: Int = 0 //빨간줄 때매 임시로 넣은거

    // 인접 리스트를 이용한 그래프 예시
    class Node(val vertex: Int, val weight: Int)

    val graph =  Array<LinkedList<Node>>(N) { LinkedList() } // N 개의 리스트 초기화

    // 간선 추가
    graph[u].add(Node(v, weight)) // 노드 u의 인접 리스트에 노드 v를 추가하고, 가중치 weight 를 저장

    // 간선 확인
    for(node in graph[u]){
        if(node.vertex == v){
            //노드 u 와 노드 v 사이에 간선이 존재함
        }
    }
}

// 인접 리스트는 그래프의 간선 정보를 리스트로 표현하는 방식.
// 각 노드를 리스트로 연결하여 인접한 노드들을 저장함.
// 예를 들어, 노드 i 와 노드 j 사이의 간선이 존재하면 노드 i의 인접 리스트에 노드 j를 추가하고,
// 간선이 없으면 추가하지 않음
// 인접 리스트는 공간을 더 효율적으로 사용할 수 있고,
// 그래프의 구조가 희소한 경우에 유리함.
