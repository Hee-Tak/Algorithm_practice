/**
 * 인접행렬
 * 그래프의 간선 정보를 2차원 배열로 표현하므로, 노드 간의 연결 여부와 가중치를 빠르게 확인할 수 있음
 * 또한, 노드 간의 연결 여부를 상수 시간(O(1))에 확인할 수 있어, 그래프의 정보를 빠르게 조회하고 변경할 수 있음
 * 그러나 노드의 개수가 많거나, 간선의 개수가 적은 경우에는 불필요한 공간 낭비가 발생할 수 있음.
 */

fun adjMatrix(N: Int, u: Int, v: Int){
    //인접 행렬을 이용한 그래프 예시
    val graph = Array(N) { IntArray(N) { 0 } } // N * N 크기의 2차원 배열 초기화

    // 간선 추가
    graph[u][v] = 1 //노드 u 와 노드 v 사이에 간선 추가

    // 간선 확인
    if(graph[u][v] == 1){
        // 노드 u 와 노드 v 사이에 간선이 존재함
    }


}

// graph의 각 원소는 노드 간의 연결 여부를 나타낸다.
// 예를 들어, 노드 i 와 노드 j 사이의 간선이 존재하면
// 인접 행렬의 i 번째 행, j 번째 열에 1을 표시하고, 간선이 없으면 0을 표시함
// 인접 행렬은 노드 간의 연결 여부를 빠르게 확인할 수 있고,
// 간선의 개수가 많은 경우에 유리함.